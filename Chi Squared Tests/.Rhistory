library(mosaic)
library(tidyverse)
library(pander)
GSS <- read.csv("../../Data/GSS2012.csv", header=TRUE)
setwd("C:/Users/Jae/Desktop/R/Math 325/Statistics-Notebook-master/Statistics-Notebook-master/Analyses/Chi Squared Tests")
GSS2012 <- read.csv("../../Data/GSS2012.csv", header=TRUE)
GSS <- GSS2012 %>% select(USCITZN, trust) %>% filter(USCITZN %in% c(1, 2), trust %in% c(1, 2))# %>% mutate(USCITZN = as.factor(USCITZN))
table(GSS)
library(mosaic)
library(tidyverse)
library(pander)
GSS2012 <- read.csv("../../Data/GSS2012.csv", header=TRUE)
GSS <- GSS2012 %>% select(USCITZN, trust) %>% filter(USCITZN %in% c(1, 2), trust %in% c(1, 2))
setwd("C:/Users/Jae/Desktop/R/Math 325/Statistics-Notebook-master/Statistics-Notebook-master/Analyses/Chi Squared Tests")
GSS2012 <- read.csv("../../Data/GSS2012.csv", header=TRUE)
GSS2012 <- read.csv("../../Data/GSS2012.csv", header=TRUE)
GSS <- GSS2012 %>% select(USCITZN, trust) %>% filter(USCITZN %in% c(1, 2), trust %in% c(1, 2))
library(tidyverse)
library(mosaic)
GSS <- GSS2012 %>% select(USCITZN, trust) %>% filter(USCITZN %in% c(1, 2), trust %in% c(1, 2))# %>% mutate(USCITZN = as.factor(USCITZN))
library(readr)
GSS2012 <- read_delim("C:/Users/Jae/Desktop/R/Math 325/Statistics-Notebook-master/Statistics-Notebook-master/Data/GSS2012.csv",
"\t", escape_double = FALSE, trim_ws = TRUE)
GSS <- GSS2012 %>% select(USCITZN, trust) %>% filter(USCITZN %in% c(1, 2), trust %in% c(1, 2))
table(GSS)
GSS2012 <- read.csv("../../Data/GSS2012.csv", header=TRUE)
GSS <- GSS2012 %>% select(USCITZN, trust) %>% filter(USCITZN %in% c(1, 2), trust %in% c(1, 2))
setwd("C:/Users/Jae/Desktop/R/Math 325/Statistics-Notebook-master/Statistics-Notebook-master/Data")
GSS2012 <- read.csv("../../Data/GSS2012.csv", header=TRUE)
setwd("C:/Users/Jae/Desktop/R/Math 325/Statistics-Notebook-master/Statistics-Notebook-master/Analyses/Chi Squared Tests")
GSS2012 <- read.csv("../../Data/GSS2012.csv", header=TRUE)
GSS <- GSS2012 %>% select(USCITZN, trust) %>% filter(USCITZN %in% c(1, 2), trust %in% c(1, 2))
GSS <- GSS2012 %>% select(USCITZN, trust) %>% filter(USCITZN %in% c(1, 2), trust %in% c(1, 2))
table(GSS)
barplot(table(GSS), beside = TRUE, col = c("black", "yellow"), ylab = "Counts", main = "Trust and Citizen or Not",
names.arg = c("Trust", "Not Trust")) #  legend.text = TRUE, args.legend = list(bty = "n", x = "topleft")
legend("topleft", legend = c("US Citizen", "Not US Citizen"), bty = "n", pch = 15, col = c("black","yellow"), cex = 0.8)
GSS2012 <- read.table("../../Data/GSS2012.csv", sep="\t", header=TRUE)
GSS <- GSS2012 %>% select(USCITZN, trust) %>% filter(USCITZN %in% c(1, 2), trust %in% c(1, 2))
table(GSS)
GSS <- GSS2012 %>% select(USCITZN, trust) %>% filter(USCITZN %in% c(1, 2), trust %in% c(1, 2))
names(GSS)[names(GSS) == 1] <- "Trust"
names(GSS)[names(GSS) == 2] <- "Not Trust"
table(GSS) %>% pander(caption = "Numbers of trust that are US citizens or not")
GSS <- GSS2012 %>% select(USCITZN, trust) %>% filter(USCITZN %in% c(1, 2), trust %in% c(1, 2))
names(GSS)[names(GSS) == "1"] <- "Trust"
names(GSS)[names(GSS) == "2"] <- "Not Trust"
table(GSS) %>% pander(caption = "Numbers of trust that are US citizens or not")
GSS <- GSS2012 %>% select(USCITZN, trust) %>% filter(USCITZN %in% c(1, 2), trust %in% c(1, 2))
colnames(GSS) <- c("Trust", "Not Trust")
table(GSS) %>% pander(caption = "Numbers of trust that are US citizens or not")
325+285+706+885
122/2201
325/2201
325/2201*1490
88/178*100
100-49.4382
52*49.4382
52*.494382
26.2+26.8
26.2/53*100
88/178
26.2/53
0.494382*88
0.494382*53
0.505618*53
0.494382*125
0.505618*125
0.1558^2+(-0.1015^2)+(-0.1541^2)+ 	0.1003^2
Therefore, the ratio of how much people trust others is not related to their nationality.
27/88*100
100-30.68182
26/90*100
100-28.88889
library(mosaic)
library(tidyverse)
library(pander)
GSS2012 <- read.table("../../Data/GSS2012.csv", sep="\t", header=TRUE)
mychi$expected %>% pander(caption = "Expected numbers of trust that are US citizens or not")
mychi = chisq.test(x)
x <- table(GSS)
mychi = chisq.test(x)
mychi$expected %>% pander(caption = "Expected numbers of trust that are US citizens or not")
my_output_table2 <- data.frame(Model = c("True", "Hannah", "Trevor", "Brother Saunders"), `Original R2` = c(summary(mylm)$r.squared, summary(lmh)$r.squared, summary(lmt)$r.squared, summary(lms)$r.squared), `Orig. Adj. R-squared` = c(summary(mylm)$adj.r.squared, summary(lmh)$adj.r.squared, summary(lmt)$adj.r.squared, summary(lms)$adj.r.squared), `Validation R-squared` = c(rsmy, rsh, rst, rss), `Validation Adj. R^2` = c(rsmya, rsha, rsta, rssa))
colnames(my_output_table2) <- c("Model", "Original $R^2$", "Original Adj. $R^2$", "Validation $R^2$", "Validation Adj. $R^2$")
knitr::kable(my_output_table2, escape=TRUE, digits=4)
set.seed(1140411)
sample1 <- rnorm(30, 69, 2.5)
sample2 <- rnorm(30, 69, 2.5)
theData <- data.frame(values = c(sample1,sample2), group = rep(c(1,2), each=30))
View(theData)
boxplot(values ~ group, data = theData)
myTest <- t.test(values ~ group, data = theData, mu = 0)
observedTestStat <- t.test$statistic
observedTestStat <- myTest$statistic
N <- 2000
permutestTestStats <- rep(NA, N)
permutedTest <- t.test(values ~ permutedData, data = theData)}
permutedTestStats[i] <- permutedTest$statistic}
permutedTestStats[i] <- permutedTest$statistic}
N <- 2000
permutestTestStats <- rep(NA, N)
for (i in 1:N){permutedData <- sample(x = theData$group)
permutedTest <- t.test(values ~ permutedData, data = theData)
permutedTestStats[i] <- permutedTest$statistic}
for (i in 1:N){permutedData <- sample(x = theData$group)
permutedTest <- t.test(values ~ permutedData, data = theData)
permutestTestStats[i] <- permutedTest$statistic}
permutedTest <- t.test(values ~ permutedData, data = theData)
permutestTestStats[i] <- permutedTest$statistic}
permutestTestStats <- rep(NA, N)
for (i in 1:N){permutedData <- sample(x = theData$group)
permutedTest <- t.test(values ~ permutedData, data = theData)
permutestTestStats[i] <- permutedTest$statistic}
hist(permutestTestStats)
abline(v = observedTestStat)
sum(permutestTestStats <= observedTestStat) / N
observedTestStat
sum(permutestTestStats >= observedTestStat) / N
sum(permutestTestStats <= observedTestStat) / N
2*sum(permutestTestStats <= observedTestStat) / N
set.seed(121)
sample1 <- rnorm(30, 185, 8)
sample2 <- sample1 - rnorm(30, 0, 3.5)
theData <- data.frame(values = c(sample1,sample2), group = rep(c(1,2), each=30), id = rep(c(1:30),times=2))
View(theData)
with(theData, hist(values[group==1] - values[group==2]))
mean(values[group==1] - values[group==2])
View(theData)
mean(theData$values[theData$group==1] - theData$values[theData$group==2])
View(theData)
mean(sample2)
mean(theData, hist(values[group==1] - values[group==2]))
mean(theData, (values[group==1] - values[group==2]))
mean(theData, values[group==1] - values[group==2])
myTest <- t.test(values ~ group, data = theData, paired = TRUE, mu = 0)
observedTestStat <- myTest$statistic
N <- 2000
permutedTestStats <- rep(NA, N)
permutedTestStats[i] <- permutedTest$statistic}
for (i in 1:N){permutedData <- sample(x = x(1, -1), size  = 30, replace = TRUE)
permutedTest <- with(theData, t.test(permutedData*(values[group==1] - values[group==2], mu = 0)))
permutedTestStats[i] <- permutedTest$statistic}
permutedTest <- with(theData, t.test(permutedData*(values[group==1] - values[group==2]), mu = 0)))
for (i in 1:N){permutedData <- sample(x = x(1, -1), size  = 30, replace = TRUE)
permutedTest <- with(theData, t.test(permutedData*(values[group==1] - values[group==2]), mu = 0))
permutedTestStats[i] <- permutedTest$statistic}
for (i in 1:N){permutedData <- sample(x = c(1, -1), size  = 30, replace = TRUE)
permutedTest <- with(theData, t.test(permutedData*(values[group==1] - values[group==2]), mu = 0))
permutedTestStats[i] <- permutedTest$statistic}
hist(permutedTestStats)
abline(v = observedTestStat)
sum(permutedTestStats <= observedTestStat) / N
sum(permutedTestStats >= observedTestStat) / N
observedTestStat
2*sum(permutedTestStats >= observedTestStat) / N
2*sum(permutedTestStats <= observedTestStat) / N
myTest
mean(theData$values[theData$group==1] - theData$values[theData$group==2])
mean(theData, values[group==1] - values[group==2])
mean(theData$values[theData$group==1] - theData$values[theData$group==2])
myTest
########
library(mosaic)
table(SaratogaHouses$fuel)
?SaratogaHouses
kruskal.test(price ~ fuel, data = SaratogaHouses)
boxplot(price ~ fuel, data=SaratogaHouses)
median(SaratogaHouses$price[SaratogaHouses$fuel == "gas"])
#######33
?ToothGrowth
xyplot(len ~ dose, groups=supp, data=ToothGrowth, type=c("p","a"), auto.key=TRUE)
#######33
?ToothGrowth
myTest <- aov(len ~ dose*supp , data = ToothGrowth)
summary(myTest)
summary(myTest)
summary(myTest)$statistic
myTest$statistic
summary(myTest)
######
?RailTrail
######
?RailTrail
######
library(mosaicData)
######
install.packages("mosaicData")
######
install.packages("mosaicData")
install.packages("mosaicData")
library(mosaicData)
?RailTrail
boxplot(cloudcover ~ weekday, data=RailTrail, names=c("Weekend/Holiday", "Weekday"), ylab="Cloud Cover Measurement (in oktas)")
t.test(cloudcover ~ weekday, data=RailTrail)
myTest <- aov(len ~ dose*supp , data = ToothGrowth)
summary(myTest)
xyplot(len ~ dose, groups=supp, data=ToothGrowth, type=c("p","a"), auto.key=TRUE)
xyplot(len ~ dose, groups=supp, data=ToothGrowth, type=c("p","a"), auto.key=TRUE)
######## Kruskal - same distribution
library(mosaic)
xyplot(len ~ dose, groups=supp, data=ToothGrowth, type=c("p","a"), auto.key=TRUE)
myTest <- aov(len ~ dose*supp , data = ToothGrowth)
summary(myTest)
sum(133.415+12.317+5.333)
