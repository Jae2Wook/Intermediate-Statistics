library(mosaic)
library(car)
library(pander)
library(DT) #You may need to run: install.packages("DT")
View(Duncan)
Duncan1 <- Duncan %>% filter(type %in% c("wc", "prof")) %>% droplevels()
qqPlot(prestige ~ type, data = Duncan1)
length(Duncan1$prestige)
wilcox.test(prestige ~ type, data = Duncan1)
Duncan1 <- Duncan %>% filter(type %in% c("wc", "prof")) #%>% droplevels()
qqPlot(prestige ~ type, data = Duncan1)
table(Duncan1$type, Duncan1$prestige)
Duncan1 <- Duncan %>% filter(type %in% c("wc", "prof")) %>% droplevels()
table(Duncan1$type, Duncan1$prestige)
wilcox.test(prestige ~ type, data = Duncan1)
Duncan1 <- Duncan %>% filter(type %in% c("wc", "prof")) %>% droplevels()
Duncan1 <- Duncan %>% filter(type %in% c("wc", "prof")) #%>% droplevels()
# Duncan1 <- Duncan1 %>% mutate(prestige = as.numeric(prestige), na.rm = TRUE)
qqPlot(prestige ~ type, data = Duncan1)
View(Duncan)
Duncan1 <- Duncan %>% filter(type %in% c("wc", "prof")) #%>% droplevels()
# Duncan1 <- Duncan1 %>% mutate(prestige = as.numeric(prestige), na.rm = TRUE)
qqPlot(prestige ~ type, data = Duncan1)
library(pander)
wilcox.test(prestige ~ type, data = Duncan1) %>% pander()
wilcox.test(prestige ~ type, data = Duncan1) #%>% pander()
wilcox.test(prestige ~ type, alternative = "greater",data = Duncan1) #%>% pander()
# Play the chunk above and this one to get the data into your Console
View(Friendly)
?Friendly
F1 <- Friendly %>% filter(with_mesh = condition == "Meshed" | condition == "SFR")
F1 <- Friendly %>% filter(condition == "Meshed" | condition == "SFR")
View(F1)
View(F1)
F2 <- Friednly %>% filter(condition == "Before" | condition == "SFR")
F2 <- Friendly %>% filter(condition == "Before" | condition == "SFR")
View(F2)
boxplot(correct ~ condition, data = Frienly)
boxplot(correct ~ condition, data = Friendly)
boxplot(correct ~ condition, data = F1)
boxplot(correct ~ condition, data = F1)
boxplot(correct ~ condition, data = F2)
boxplot(correct ~ condition, data = Friendly)
library(ggplot2)
ggplot(Friendly, aes(x = c("Meshed", "SFR", "Before"), y = correct)) +
geom_boxplot()
ggplot(Friendly, aes(x = c(condition == "Meshed", condition == "SFR", condition == "Before"), y = correct)) +
geom_boxplot()
Friendly1 <- factor(Friendly, levels = ("Meshed", "SFR", "Before"))
Friendly1 <- factor(Friendly, levels = c("Meshed", "SFR", "Before"))
ggplot(Friendly1, aes(x = c(condition == "Meshed", condition == "SFR", condition == "Before"), y = correct)) +
geom_boxplot()
ggplot(Friendly1, aes(x = condition, y = correct)) +
geom_boxplot()
ggplot(Friendly1, aes(x = condition, y = correct)) +
geom_boxplot(fill = "grey")
ggplot(Friendly1, aes(x = condition, y = correct)) +
geom_boxplot(fill = "grey")
boxplot(correct ~ condition, data = Friendly1)
View(Friendly1)
Friendly1 <- factor(Friendly, levels = c("Meshed", "SFR", "Before"))
View(Friendly1)
condition1 <- with(Friendly, reorder = c(Meshed, SFR, Before))
boxplot(correct ~ condition, data = Friendly1)
condition1 <- with(Friendly, reorder = c(Meshed, SFR, Before))
View(Friendly)
condition1 <- with(Friendly, reorder = c(Meshed, SFR, Before))
ggplot(Friendly1, aes(x = condition, y = correct)) +
geom_boxplot(fill = "grey")
ggplot(Friendly1, aes(x = condition, y = correct)) +
geom_boxplot(fill = "grey")
`rlang::last_error()`
boxplot(correct ~ condition, data = Friendly)`
boxplot(correct ~ condition, data = Friendly)`
library(ggplot2)
library(mosaic)
library(ggplot2)
library(car)
library(pander)
library(DT) #You may need to run: install.packages("DT")
# Play the chunk above and this one to get the data into your Console
View(Friendly)
ggplot(Friendly, aes(x = condition, y = correct)) +
geom_boxplot()
ggplot(Friendly, aes(x = condition, y = correct)) +
geom_boxplot() +
theme_bw()
library(car)
View(Salaries)
table(Salaries%sex)
library(mosaic)
library(tidyverse)
table(Salaries%sex)
table(Salaries%sex)
library(car)
library(mosaic)
library(tidyverse)
table(Salaries%sex)
table(Salaries%sex, na.rm = TRUE)
a <- table(Salaries%sex, na.rm = TRUE)
table(Salaries)
table(Salaries$sex)
table(Salaries$sex[Salaries$rank == "AsstProf"])
boxplot(Salaries$discipline, Salaries$salary)
boxplot(Salaries$salary, Salaries$discipline)
boxplot(Salaries$discipline[Salaries$discipline == "A"],Salaries$discipline[Salaries$discipline == "B"] )
boxplot(Salaries$discipline[Salaries$discipline == "A"],Salaries$discipline[Salaries$discipline == "B"], na.rm = TRUE)
boxplot(Salaries$salary[Salaries$discipline == "A"],Salaries$salary[Salaries$discipline == "B"], na.rm = TRUE)
wilcox.test(Salaries$salary[Salaries$discipline == " A"],Salaries$salary[Salaries$discipline == "B"])
Salaries %>% group_by(sex) %>% summarise(n())
Salaries %>% group_by(rank, sex) %>% summarise(n())
boxplot(salary ~ discipline, data = Salaries)
##### 3
wilcox.test(salary ~ disciple, data = Salaries)
##### 3
wilcox.test(salary ~ discipline, data = Salaries)
Salaries %>% group_by(rank, sex) %>% summarise(n())
ggplot(Friendly, aes(x = condition, y = correct)) +
geom_boxplot() +
theme_bw()
ggplot(Friendly, aes(x = condition, y = correct)) +
geom_boxplot() +
labs(title = "Memorized Words by Different Methods", x = "Methods", y = "Number of Memorized Words")
ggplot(Friendly, aes(x = condition, y = correct)) +
geom_boxplot() +
labs(title = "Memorized Words by Different Methods", x = "Methods", y = "Number of Memorized Words")+
theme_bw()
ggplot(Friendly, aes(x = condition, y = correct, fill = condition)) +
geom_boxplot() +
labs(title = "Memorized Words by Different Methods", x = "Methods", y = "Number of Memorized Words")+
theme_bw()
ggplot(Friendly, aes(x = condition, y = correct, fill = condition)) +
geom_boxplot() +
geom_dotplot() +
labs(title = "Memorized Words by Different Methods", x = "Methods", y = "Number of Memorized Words")+
theme_bw()
ggplot(Friendly, aes(x = condition, y = correct, fill = condition)) +
geom_boxplot() +
labs(title = "Memorized Words by Different Methods", x = "Methods", y = "Number of Memorized Words")+
geom_dotplot() +
theme_bw()
ggplot(Friendly, aes(x = condition, y = correct, fill = condition)) +
geom_boxplot() +
labs(title = "Memorized Words by Different Methods", x = "Methods", y = "Number of Memorized Words")+
geom_jitter(shape = 16) +
theme_bw()
ggplot(Friendly, aes(x = condition, y = correct, fill = condition)) +
geom_boxplot() +
labs(title = "Memorized Words by Different Methods", x = "Methods", y = "Number of Memorized Words")+
geom_jitter(shape = 16, col = "orange") +
theme_bw()
ggplot(Friendly, aes(x = condition, y = correct, fill = condition)) +
geom_boxplot() +
labs(title = "Memorized Words by Different Methods", x = "Methods", y = "Number of Memorized Words")+
geom_jitter(shape = 16) +
theme_bw()
wilcox.test{Meshed ~ SFR, data = F1, alternative = "greater", conf.level = 0.975}
wilcox.test(Meshed ~ SFR, data = F1, alternative = "greater", conf.level = 0.975)
F1 <- Friendly %>% filter(condition == "Meshed" | condition == "SFR")
F2 <- Friendly %>% filter(condition == "Before" | condition == "SFR")
wilcox.test(Meshed ~ SFR, data = F1, alternative = "greater", conf.level = 0.975)
wilcox.test(correct ~ condition, data = F1, alternative = "greater", conf.level = 0.975)
wilcox.test(correct ~ condition, data = F2, alternative = "greater", conf.level = 0.975)
table(F1$condition, F1$correct)
library(pander)
table(F1$condition, F1$correct) %>% droplevels()
c <- table(F1$condition, F1$correct) %>% droplevels()
table(F1$condition, F1$correct,droplevels())
table(F1$condition, F1$correct
table(F1$condition, F1$correct)
table(F1$condition, F1$correct)
table(F1$condition, F1$correct) %>% pander()
table(F1$condition, F1$correct) %>% pander(droplevels())
table(F1$condition, F1$correct) %>% pander(droplevels.factor("Before")
F1 <- Friendly %>% filter(condition == "Meshed" | condition == "SFR") %>% droplevels()
View(F1)
View(F2)%>% droplevels()
table(F1$condition, F1$correct) %>% pander()
F1 <- Friendly %>% filter(condition == "Meshed" | condition == "SFR") %>% droplevels()
wilcox.test(correct ~ condition, data = F1, alternative = "greater", conf.level = 0.975)
table(F1$condition, F1$correct) %>% pander()
F2 <- Friendly %>% filter(condition == "Before" | condition == "SFR") %>% droplevels()
table(F1$condition, F1$correct) %>% droplevels()
wilcox.test(correct ~ condition, data = F2, alternative = "greater", conf.level = 0.975)
table(F1$condition, F1$correct)
qqPlot(correct ~ condition, data = F1)
par(mfrow = c(1,2))
qqPlot(correct ~ condition, data = F1)
qqPlot(correct ~ condition, data = F2)
qqPlot(correct ~ condition, data = F1, main = "SFR & Meshed Methods", ylab = "Number of Memorized Words", id = FALSE)
qqPlot(correct ~ condition, data = F2, main = "SFR & Before Methods", ylab = "Number of Memorized Words", id = FALSE)
par(mfrow = c(1,2))
qqPlot(correct ~ condition, data = F1, main = "SFR & Meshed Methods", ylab = "Number of Memorized Words", id = FALSE)
qqPlot(correct ~ condition, data = F1, main = "SFR & Meshed Methods", ylab = "Number of Memorized Words")
qqPlot(correct ~ condition, data = F1, main = "SFR & Meshed Methods", ylab = "Number of Memorized Words")
qqPlot(correct ~ condition, data = F1, main = c("Meshed Methods", "SFR Methods"), ylab = "Number of Memorized Words")
qqPlot(correct ~ condition, data = F2, main = c("SFR & Before Methods"), ylab = "Number of Memorized Words", id = FALSE)
qqPlot(correct ~ condition, data = F1, main = c("Meshed Method", "SFR Method"), ylab = "Number of Memorized Words")
qqPlot(correct ~ condition, data = F2, main = c("Before Method", "SFR Method"), ylab = "Number of Memorized Words", id = FALSE)
# Duncan1 <- Duncan1 %>% mutate(prestige = as.numeric(prestige), na.rm = TRUE)
qqPlot(prestige ~ type, data = Duncan1)
library(car)
library(tidyverse)
library(mosaic)
library(ggplot2)
library(pander)
View(Duncan)
# Duncan1 <- Duncan1 %>% mutate(prestige = as.numeric(prestige), na.rm = TRUE)
qqPlot(prestige ~ type, data = Duncan1)
Duncan1 <- Duncan %>% filter(type %in% c("wc", "prof")) %>% droplevels()
# Duncan1 <- Duncan1 %>% mutate(prestige = as.numeric(prestige), na.rm = TRUE)
qqPlot(prestige ~ type, data = Duncan1)
qqPlot(correct ~ condition, data = F1, main = c("Meshed Method", "SFR Method"), ylab = "Number of Memorized Words")
qqPlot(correct ~ condition, data = F2, main = c("Before Method", "SFR Method"), ylab = "Number of Memorized Words", id = FALSE)
F2 <- Friendly %>% filter(condition == "Before" | condition == "SFR") %>% droplevels()
qqPlot(correct ~ condition, data = F2, main = c("Before Method", "SFR Method"), ylab = "Number of Memorized Words", id = FALSE)
qqPlot(correct ~ condition, data = F2, main = c("Before Method", "SFR Method"), ylab = "Number of Memorized Words")
qqPlot(correct ~ condition, data = F1, main = c("Meshed Method", "SFR Method"), ylab = "Number of Memorized Words", id = FALSE)
qqPlot(correct ~ condition, data = F1, main = c("Meshed Method", "SFR Method"), ylab = "Number of Memorized Words")
qqPlot(correct ~ condition, data = F2, main = c("Before Method", "SFR Method"), ylab = "Number of Memorized Words")
# Use this R-Chunk to load your libraries!
library(tidyverse)
library(DT)
library(pander)
library(readr)
library(car)
n <- 6                      # sample size
mean <-  20                 # distribution mean
sigma <- 6                  # distribution standard deviation
A <- rnorm(n, mean, sigma) # normally distributed data
B <- rnorm(n, mean, sigma) # normally distributed data
dat <- data.frame(group = c(rep("A", n), rep("B", n)), value = c(A, B))
alpha = 0.05
myTest <- wilcox.test(A, B, paired = FALSE, mu = 0, alternative = "two.sided", conf.level = 1 - alpha)
layout(matrix(c(1,2), 2, 1, byrow = TRUE), heights=c(4,2))
par(mai=c(.5, .5, .6, .01))  # margine size
colors = c("steelblue", "sienna1")
stripchart(value ~ group, data = dat, pch = 16, col = colors, ylim = c(0,10), xlim = c(0, 40), main = paste("Small Sample - Same Distribution (p-value: ", round(myTest$p.value, 4), ")", ifelse(myTest$p.value < alpha, "\n -- TYPE I ERROR --", "")))
curve(100 * dnorm(x, mean, sigma) + 3, add = TRUE, from=-20, to=40)
n <- 6                      # sample size
df_A <-  3                 # distribution A mean
df_B <-  6                 # distribution B mean
A <- rchisq(n, df_A) # chisq distributed data
B <- rchisq(n, df_B) # chisq distributed data
dat <- data.frame(group = c(rep("A", n), rep("B", n)), value = c(A, B))
alpha = 0.05
myTest <- wilcox.test(A, B, paired = FALSE, mu = 0, alternative = "two.sided", conf.level = 1 - alpha)
layout(matrix(c(1,2), 2, 1, byrow = TRUE), heights=c(4,2))
par(mai=c(.5, .5, .6, .01))
colors = c("steelblue", "sienna1")
stripchart(value ~ group,
data = dat,
pch = 16,
col = colors,
ylim = c(0,10),
xlim = c(0, 15),
main = paste("Small Sample - Different Distribution (p-value: ", round(myTest$p.value, 4), ")", ifelse(myTest$p.value > alpha, "\n -- TYPE II ERROR --", "")))
curve(15 * dchisq(x, df_A) + 3, add = TRUE, from=0, to=20, col = colors[1])
curve(15 * dchisq(x, df_B) + 3, add = TRUE, from=0, to=20, col = colors[2])
F1 <- wilcox.test(correct ~ condition, paired = FALSE, mu = 0, alternative = "two.sided", conf.level =0.975)
F1 <- Friendly %>% filter(condition == "Meshed" | condition == "SFR") %>% droplevels()
F1 <- wilcox.test(correct ~ condition, paired = FALSE, mu = 0, alternative = "two.sided", conf.level =0.975)
ggplot(Friendly, aes(x = condition, y = correct, fill = condition)) +
geom_boxplot(horizontal = TRUE) +
labs(title = "Memorized Words by Different Methods", x = "Methods", y = "Number of Memorized Words")+
geom_jitter(shape = 16) +
theme_bw()
ggplot(Friendly, aes(x = condition, y = correct, fill = condition)) +
geom_boxplot(vertical = TRUE) +
labs(title = "Memorized Words by Different Methods", x = "Methods", y = "Number of Memorized Words")+
geom_jitter(shape = 16) +
theme_bw()
ggplot(Friendly, aes(x = condition, y = correct, fill = condition)) +
geom_boxplot() +
labs(title = "Memorized Words by Different Methods", x = "Methods", y = "Number of Memorized Words")+
geom_jitter(shape = 16) +
theme_bw()
# Play the chunk above and this one to get the data into your Console
View(Friendly)
ggplot(Friendly, aes(x = condition, y = correct, fill = condition)) +
geom_boxplot() +
labs(title = "Memorized Words by Different Methods", x = "Methods", y = "Number of Memorized Words")+
geom_jitter(shape = 16) +
theme_bw()
ggplot(Friendly, aes(x = condition, y = correct, fill = condition)) +
geom_boxplot() +
labs(title = "Memorized Words by Different Methods", x = "Methods", y = "Number of Memorized Words")+
geom_jitter(shape = 16) +
coord_flip() +
theme_bw()
ggplot(Friendly, aes(x=condition, fill=condition)) +
geom_histogram(binwidth=.5, position="dodge")
ggplot(Friendly, aes(x=condition)) +
geom_histogram(binwidth=.5, position="dodge")
ggplot(Friendly, aes(x=condition)) +
geom_histogram(binwidth=.5) +
geom_vline(aes(xintercept=median(correct)),color="red", linetype="dashed", size=1)
ggplot(Friendly, aes(x=condition, stat = "count")) +
geom_histogram(binwidth=.5) +
geom_vline(aes(xintercept=median(correct)),color="red", linetype="dashed", size=1)
ggplot(Friendly, aes(x=condition)) +
geom_histogram(binwidth=.5, , stat = "count") +
geom_vline(aes(xintercept=median(correct)),color="red", linetype="dashed", size=1)
ggplot(Friendly, aes(x=condition)) +
geom_histogram(binwidth=.5, stat = "count") +
geom_vline(aes(xintercept=median(correct)),color="red", linetype="dashed", size=1)
ggplot(F1, aes(x=condition)) +
geom_histogram(binwidth=.5, stat = "count") +
geom_vline(aes(xintercept=median(correct)),color="red", linetype="dashed", size=1)
ggplot(F1, aes(x=condition)) +
geom_histogram(binwidth=.5, stat = "correct") +
geom_vline(aes(xintercept=median(correct)),color="red", linetype="dashed", size=1)
ggplot(F1, aes(x=condition)) +
geom_histogram(binwidth=.5) +
geom_vline(aes(xintercept=median(correct)),color="red", linetype="dashed", size=1)
Friendly %>% group_by(Methods = condition) %>% summarise(Median = median(correct), Sample_Size = n()) %>% pander(captioin = "Medians & Sample Sizes for Each Group")
wilcox.test(correct ~ condition, data = F1, mu = 0, alternative = "two.sided", conf.level = 0.975) %>% pander(caption = "SFR & Meshed Method Wilcoxon Test")
wilcox.test(correct ~ condition, data = F1, mu = 0, alternative = "two.sided", conf.level = 0.975) #%>% pander(caption = "SFR & Meshed Method Wilcoxon Test")
par(mfrow = c(1,2))
wilcox.test(correct ~ condition, data = F1, mu = 0, alternative = "two.sided", conf.level = 0.975) %>% pander(caption = "SFR & Meshed Method Wilcoxon Test")
wilcox.test(correct ~ condition, data = F2, mu = 0, alternative = "two.sided", conf.level = 0.975) %>% pander(caption = "SFR & Before Method Wilcoxon Test")
par(mfrow = c(1,1))
wilcox.test(correct ~ condition, data = F1, mu = 0, alternative = "greater", conf.level = 0.975) %>% pander(caption = "SFR & Meshed Method Wilcoxon Test")
