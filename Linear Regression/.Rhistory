summary(mtlm)
predict(mylm, data.frame(qsec = 19), interval = "prediction")
auto_mtcars %>%
ggplot(aes(x = qsec, y = mpg)) +
geom_point(color = "skyblue") +
#geom_smooth(method = "lm", se = FALSE, color = "orange", size = 0.7, linetype = "dashed") +
labs(title = "Gas Mileage of mtcars Vehicles", subtitle = "Automatic Transmissions Only (am==0)",
x = "Quarter Mile Time (qsec)", y = "Gas Mileage (mpg)") +
theme_bw()
auto_mtcars %>%
ggplot(aes(x = qsec, y = mpg)) +
geom_point(color = "skyblue") +
geom_smooth(method = "lm", se = FALSE, color = "orange", size = 0.7, linetype = "dashed") +
labs(title = "Gas Mileage of mtcars Vehicles", subtitle = "Automatic Transmissions Only (am==0)",
x = "Quarter Mile Time (qsec)", y = "Gas Mileage (mpg)") +
theme_bw()
mtcars %>%
ggplot(mapping = aes(x = cyl, y = mpg, group = cyl)) +
geom_boxplot(fill = "white", color = "skyblue", width = .5, size = .9, outlier.size = 1) +
scale_y_continuous(breaks = seq(10, 35, by = 5), limits = c(10, 35)) +
scale_x_continuous(breaks = c(4, 6, 8)) +
labs(title = "Gas Mileage of mtcars Vehicles", x = "Number of Cylinders of Engine (cyl)",
y = "Gas Mileage (mpg)") +
theme(plot.title = element_text(hjust = .5)) +
theme_bw()
auto_mtcars %>%
ggplot(aes(x = qsec, y = mpg)) +
geom_point(color = "skyblue") +
geom_smooth(method = "lm", se = FALSE, color = "orange", size = 0.7, linetype = "dashed") +
labs(title = "Gas Mileage of mtcars Vehicles", subtitle = "Automatic Transmissions Only (am==0)",
x = "Quarter Mile Time (qsec)", y = "Gas Mileage (mpg)") +
theme_bw()
mtcars %>%
ggplot(mapping = aes(x = cyl, y = mpg, group = cyl)) +
geom_boxplot(fill = "white", color = "skyblue", width = .5, size = .9, outlier.size = 1) +
scale_y_continuous(breaks = seq(10, 35, by = 5), limits = c(10, 35)) +
scale_x_continuous(breaks = c(4, 6, 8)) +
labs(title = "Gas Mileage of mtcars Vehicles", x = "Number of Cylinders of Engine (cyl)",
y = "Gas Mileage (mpg)") +
theme(plot.title = element_text(hjust = .5)) +
theme_bw()
mtcars %>%
ggplot(mapping = aes(x = cyl, y = mpg, group = cyl)) +
geom_boxplot(fill = "white", color = "skyblue", width = .5, size = .9, outlier.size = 1) +
scale_y_continuous(breaks = seq(10, 35, by = 5), limits = c(10, 35)) +
scale_x_continuous(breaks = c(4, 6, 8)) +
labs(subtitle = "Gas Mileage of mtcars Vehicles", x = "Number of Cylinders of Engine (cyl)",
y = "Gas Mileage (mpg)") +
#theme(plot.title = element_text(hjust = .5)) +
theme_bw()
mtcars %>%
ggplot(mapping = aes(x = cyl, y = mpg, group = cyl)) +
geom_boxplot(fill = "white", color = "skyblue", width = .5, size = .9, outlier.size = 1) +
scale_y_continuous(breaks = seq(10, 35, by = 5), limits = c(10, 35)) +
scale_x_continuous(breaks = c(4, 6, 8)) +
labs(title = "Gas",subtitle = "Gas Mileage of mtcars Vehicles", x = "Number of Cylinders of Engine (cyl)",
y = "Gas Mileage (mpg)") +
#theme(plot.title = element_text(hjust = .5)) +
theme_bw()
mtcars %>%
ggplot(mapping = aes(x = cyl, y = mpg, group = cyl)) +
geom_boxplot(fill = "white", color = "skyblue", width = .5, size = .9, outlier.size = 1) +
scale_y_continuous(breaks = seq(10, 35, by = 5), limits = c(10, 35)) +
scale_x_continuous(breaks = c(4, 6, 8)) +
labs(title = "Gas", x = "Number of Cylinders of Engine (cyl)",
y = "Gas Mileage (mpg)") +
#theme(plot.title = element_text(hjust = .5)) +
theme_bw()
mtcars %>%
ggplot(mapping = aes(x = cyl, y = mpg, group = cyl)) +
geom_boxplot(fill = "white", color = "skyblue", width = .5, size = .9, outlier.size = 1) +
scale_y_continuous(breaks = seq(10, 35, by = 5), limits = c(10, 35)) +
scale_x_continuous(breaks = c(4, 6, 8)) +
labs(title = "Gas", x = "Number of Cylinders of Engine (cyl)",
y = "Gas Mileage (mpg)") +
theme(plot.title = element_text(hjust = .5)) +
theme_bw()
mtcars %>%
ggplot(mapping = aes(x = cyl, y = mpg, group = cyl)) +
geom_boxplot(fill = "white", color = "skyblue", width = .5, size = .9, outlier.size = 1) +
scale_y_continuous(breaks = seq(10, 35, by = 5), limits = c(10, 35)) +
scale_x_continuous(breaks = c(4, 6, 8)) +
labs(title = "Gas Mileage of mtcars Vehicles", x = "Number of Cylinders of Engine (cyl)",
y = "Gas Mileage (mpg)") +
#theme(plot.title = element_text(hjust = .5)) +
theme_bw()
mtcars %>%
ggplot(mapping = aes(x = cyl, y = mpg, group = cyl)) +
geom_boxplot(fill = "white", color = "skyblue", width = .5, size = .9, outlier.size = 1) +
scale_y_continuous(breaks = seq(10, 35, by = 5), limits = c(10, 35)) +
scale_x_continuous(breaks = c(4, 6, 8)) +
labs(title = "Gas Mileage of mtcars Vehicles", x = "Number of Cylinders of Engine (cyl)",
y = "Gas Mileage (mpg)") +
theme(plot.title = element_text(hjust = .5)) +
theme_bw()
##
ggplot(mtcars, aes(x=factor(cyl),y=mpg))+
geom_boxplot(color="skyblue")+
labs(x = "Number of Cylinders of Engine (cyl)", y = "Gas Mileage (mpg)",title = "Gas Mileage of mtcars Vehicles")+
theme_bw()+
theme(plot.title = element_text(hjust = 0))
##
ggplot(mtcars, aes(x=factor(cyl),y=mpg))+
geom_boxplot(color="skyblue")+
labs(x = "Number of Cylinders of Engine (cyl)", y = "Gas Mileage (mpg)",title = "Gas Mileage of mtcars Vehicles")+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5))
mtcars %>%
ggplot(mapping = aes(x = cyl, y = mpg, group = cyl)) +
geom_boxplot(fill = "white", color = "skyblue", width = .5, size = .9, outlier.size = 1) +
scale_y_continuous(breaks = seq(10, 35, by = 5), limits = c(10, 35)) +
scale_x_continuous(breaks = c(4, 6, 8)) +
labs(title = "Gas Mileage of mtcars Vehicles", subtitle = "Gas", x = "Number of Cylinders of Engine (cyl)",
y = "Gas Mileage (mpg)") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_bw()
mtcars %>%
ggplot(mapping = aes(x = cyl, y = mpg, group = cyl)) +
geom_boxplot(fill = "white", color = "skyblue", width = .5, size = .9, outlier.size = 1) +
scale_y_continuous(breaks = seq(10, 35, by = 5), limits = c(10, 35)) +
scale_x_continuous(breaks = c(4, 6, 8)) +
labs(title = "Gas Mileage of mtcars Vehicles", subtitle = "Gas", x = "Number of Cylinders of Engine (cyl)", y = "Gas Mileage (mpg)") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_bw()
mtcars %>%
ggplot(mapping = aes(x = cyl, y = mpg, group = cyl)) +
geom_boxplot(fill = "white", color = "skyblue", width = .5, size = .9, outlier.size = 1) +
scale_y_continuous(breaks = seq(10, 35, by = 5), limits = c(10, 35)) +
scale_x_continuous(breaks = c(4, 6, 8)) +
labs(title = "Gas Mileage of mtcars Vehicles", subtitle = "Gas", x = "Number of Cylinders of Engine (cyl)", y = "Gas Mileage (mpg)") +
theme(plot.title = element_text(hjust = 1)) +
theme_bw()
##
ggplot(mtcars, aes(x=factor(cyl),y=mpg))+
geom_boxplot(color="skyblue")+
labs(x = "Number of Cylinders of Engine (cyl)", y = "Gas Mileage (mpg)",title = "Gas Mileage of mtcars Vehicles")+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5))
mtcars %>%
ggplot(mapping = aes(x = cyl, y = mpg, group = cyl)) +
geom_boxplot(fill = "white", color = "skyblue", width = .5, size = .9, outlier.size = 1) +
scale_y_continuous(breaks = seq(10, 35, by = 5), limits = c(10, 35)) +
scale_x_continuous(breaks = c(4, 6, 8)) +
labs(title = "Gas Mileage of mtcars Vehicles", subtitle = "Gas", x = "Number of Cylinders of Engine (cyl)", y = "Gas Mileage (mpg)") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_bw()
##
ggplot(mtcars, aes(x=factor(cyl),y=mpg))+
geom_boxplot(color="skyblue")+
labs(x = "Number of Cylinders of Engine (cyl)", y = "Gas Mileage (mpg)",title = "Gas Mileage of mtcars Vehicles")+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5))
## Simulating Data from a Regression Model
## This R-chunk is meant to be played in your R Console.
## It allows you to explore how the various elements
## of the regression model combine together to "create"
## data and then use the data to "re-create" the line.
set.seed(101) #Allows us to always get the same "random" sample
#Change to a new number to get a new sample
n <- 30 #set the sample size
X_i <- runif(n, 15, 45) #Gives n random values from a uniform distribution between 15 to 45.
beta0 <- 3 #Our choice for the y-intercept.
beta1 <- 1.8 #Our choice for the slope.
sigma <- 2.5 #Our choice for the std. deviation of the error terms. can change error for bigger gap
epsilon_i <- rnorm(n, 0, sigma) #Gives n random values from a normal distribution with mean = 0, st. dev. = sigma.
Y_i <- beta0 + beta1*X_i + epsilon_i #Create Y using the normal error regression model
fabData <- data.frame(y=Y_i, x=X_i) #Store the data as data
View(fabData)
#In the real world, we begin with data (like fabData) and try to recover the model that (we assume) was used to created it.
fab.lm <- lm(y ~ x, data=fabData) #Fit an estimated regression model to the fabData.
summary(fab.lm) #Summarize your model.
plot(y ~ x, data=fabData) #Plot the data.
abline(fab.lm) #Add the estimated regression line to your plot.
# Now for something you can't do in real life... but since we created the data...
abline(beta0, beta1, lty=2) #Add the true regression line to your plot using a dashed line (lty=2).
legend("topleft", legend=c("True Line", "Estimated Line"), lty=c(2,1), bty="n") #Add a legend to your plot specifying which line is which.
## Simulating Data from a Regression Model
## This R-chunk is meant to be played in your R Console.
## It allows you to explore how the various elements
## of the regression model combine together to "create"
## data and then use the data to "re-create" the line.
set.seed(101) #Allows us to always get the same "random" sample
#Change to a new number to get a new sample
n <- 30 #set the sample size
X_i <- runif(n, 15, 45) #Gives n random values from a uniform distribution between 15 to 45.
beta0 <- 3 #Our choice for the y-intercept.
beta1 <- 1.8 #Our choice for the slope.
sigma <- 2.5 #Our choice for the std. deviation of the error terms. can change error for bigger gap
epsilon_i <- rnorm(n, 0, sigma) #Gives n random values from a normal distribution with mean = 0, st. dev. = sigma.
Y_i <- beta0 + beta1*X_i + epsilon_i #Create Y using the normal error regression model
#fabData <- data.frame(y=Y_i, x=X_i) #Store the data as data
View(fabData)
#In the real world, we begin with data (like fabData) and try to recover the model that (we assume) was used to created it.
fab.lm <- lm(y ~ x, data=fabData) #Fit an estimated regression model to the fabData.
summary(fab.lm) #Summarize your model.
plot(y ~ x, data=fabData) #Plot the data.
abline(fab.lm) #Add the estimated regression line to your plot.
# Now for something you can't do in real life... but since we created the data...
abline(beta0, beta1, lty=2) #Add the true regression line to your plot using a dashed line (lty=2).
legend("topleft", legend=c("True Line", "Estimated Line"), lty=c(2,1), bty="n") #Add a legend to your plot specifying which line is which.
## Simulating Data from a Regression Model
## This R-chunk is meant to be played in your R Console.
## It allows you to explore how the various elements
## of the regression model combine together to "create"
## data and then use the data to "re-create" the line.
set.seed(101) #Allows us to always get the same "random" sample
#Change to a new number to get a new sample
n <- 30 #set the sample size
X_i <- runif(n, 15, 45) #Gives n random values from a uniform distribution between 15 to 45.
beta0 <- 3 #Our choice for the y-intercept.
beta1 <- 1111 #Our choice for the slope.
sigma <- 2.5 #Our choice for the std. deviation of the error terms. can change error for bigger gap
epsilon_i <- rnorm(n, 0, sigma) #Gives n random values from a normal distribution with mean = 0, st. dev. = sigma.
Y_i <- beta0 + beta1*X_i + epsilon_i #Create Y using the normal error regression model
fabData <- data.frame(y=Y_i, x=X_i) #Store the data as data
View(fabData)
#In the real world, we begin with data (like fabData) and try to recover the model that (we assume) was used to created it.
fab.lm <- lm(y ~ x, data=fabData) #Fit an estimated regression model to the fabData.
summary(fab.lm) #Summarize your model.
plot(y ~ x, data=fabData) #Plot the data.
abline(fab.lm) #Add the estimated regression line to your plot.
# Now for something you can't do in real life... but since we created the data...
abline(beta0, beta1, lty=2) #Add the true regression line to your plot using a dashed line (lty=2).
legend("topleft", legend=c("True Line", "Estimated Line"), lty=c(2,1), bty="n") #Add a legend to your plot specifying which line is which.
## Simulating Data from a Regression Model
## This R-chunk is meant to be played in your R Console.
## It allows you to explore how the various elements
## of the regression model combine together to "create"
## data and then use the data to "re-create" the line.
set.seed(101) #Allows us to always get the same "random" sample
#Change to a new number to get a new sample
n <- 30 #set the sample size
X_i <- runif(n, 15, 45) #Gives n random values from a uniform distribution between 15 to 45.
beta0 <- 3 #Our choice for the y-intercept.
beta1 <- 1.8 #Our choice for the slope.
sigma <- 100 #Our choice for the std. deviation of the error terms. can change error for bigger gap
epsilon_i <- rnorm(n, 0, sigma) #Gives n random values from a normal distribution with mean = 0, st. dev. = sigma.
Y_i <- beta0 + beta1*X_i + epsilon_i #Create Y using the normal error regression model
fabData <- data.frame(y=Y_i, x=X_i) #Store the data as data
View(fabData)
#In the real world, we begin with data (like fabData) and try to recover the model that (we assume) was used to created it.
fab.lm <- lm(y ~ x, data=fabData) #Fit an estimated regression model to the fabData.
summary(fab.lm) #Summarize your model.
plot(y ~ x, data=fabData) #Plot the data.
abline(fab.lm) #Add the estimated regression line to your plot.
# Now for something you can't do in real life... but since we created the data...
abline(beta0, beta1, lty=2) #Add the true regression line to your plot using a dashed line (lty=2).
legend("topleft", legend=c("True Line", "Estimated Line"), lty=c(2,1), bty="n") #Add a legend to your plot specifying which line is which.
## Simulating Data from a Regression Model
## This R-chunk is meant to be played in your R Console.
## It allows you to explore how the various elements
## of the regression model combine together to "create"
## data and then use the data to "re-create" the line.
set.seed(101) #Allows us to always get the same "random" sample
#Change to a new number to get a new sample
n <- 30 #set the sample size
X_i <- runif(n, 15, 45) #Gives n random values from a uniform distribution between 15 to 45.
beta0 <- 3 #Our choice for the y-intercept.
beta1 <- 1.8 #Our choice for the slope.
sigma <- 10 #Our choice for the std. deviation of the error terms. can change error for bigger gap
epsilon_i <- rnorm(n, 0, sigma) #Gives n random values from a normal distribution with mean = 0, st. dev. = sigma.
Y_i <- beta0 + beta1*X_i + epsilon_i #Create Y using the normal error regression model
fabData <- data.frame(y=Y_i, x=X_i) #Store the data as data
View(fabData)
#In the real world, we begin with data (like fabData) and try to recover the model that (we assume) was used to created it.
fab.lm <- lm(y ~ x, data=fabData) #Fit an estimated regression model to the fabData.
summary(fab.lm) #Summarize your model.
plot(y ~ x, data=fabData) #Plot the data.
abline(fab.lm) #Add the estimated regression line to your plot.
# Now for something you can't do in real life... but since we created the data...
abline(beta0, beta1, lty=2) #Add the true regression line to your plot using a dashed line (lty=2).
legend("topleft", legend=c("True Line", "Estimated Line"), lty=c(2,1), bty="n") #Add a legend to your plot specifying which line is which.
## Simulating Data from a Regression Model
## This R-chunk is meant to be played in your R Console.
## It allows you to explore how the various elements
## of the regression model combine together to "create"
## data and then use the data to "re-create" the line.
set.seed(101) #Allows us to always get the same "random" sample
#Change to a new number to get a new sample
n <- 30 #set the sample size
X_i <- runif(n, 15, 45) #Gives n random values from a uniform distribution between 15 to 45.
beta0 <- 3 #Our choice for the y-intercept.
beta1 <- 1111 #Our choice for the slope.
sigma <- 10 #Our choice for the std. deviation of the error terms. can change error for bigger gap
epsilon_i <- rnorm(n, 0, sigma) #Gives n random values from a normal distribution with mean = 0, st. dev. = sigma.
Y_i <- beta0 + beta1*X_i + epsilon_i #Create Y using the normal error regression model
fabData <- data.frame(y=Y_i, x=X_i) #Store the data as data
View(fabData)
#In the real world, we begin with data (like fabData) and try to recover the model that (we assume) was used to created it.
fab.lm <- lm(y ~ x, data=fabData) #Fit an estimated regression model to the fabData.
summary(fab.lm) #Summarize your model.
plot(y ~ x, data=fabData) #Plot the data.
abline(fab.lm) #Add the estimated regression line to your plot.
# Now for something you can't do in real life... but since we created the data...
abline(beta0, beta1, lty=2) #Add the true regression line to your plot using a dashed line (lty=2).
legend("topleft", legend=c("True Line", "Estimated Line"), lty=c(2,1), bty="n") #Add a legend to your plot specifying which line is which.
## Simulating Data from a Regression Model
## This R-chunk is meant to be played in your R Console.
## It allows you to explore how the various elements
## of the regression model combine together to "create"
## data and then use the data to "re-create" the line.
set.seed(101) #Allows us to always get the same "random" sample
#Change to a new number to get a new sample
n <- 30 #set the sample size
X_i <- runif(n, 15, 45) #Gives n random values from a uniform distribution between 15 to 45.
beta0 <- 3 #Our choice for the y-intercept.
beta1 <- 1111 #Our choice for the slope.
sigma <- 2000 #Our choice for the std. deviation of the error terms. can change error for bigger gap
epsilon_i <- rnorm(n, 0, sigma) #Gives n random values from a normal distribution with mean = 0, st. dev. = sigma.
Y_i <- beta0 + beta1*X_i + epsilon_i #Create Y using the normal error regression model
fabData <- data.frame(y=Y_i, x=X_i) #Store the data as data
View(fabData)
#In the real world, we begin with data (like fabData) and try to recover the model that (we assume) was used to created it.
fab.lm <- lm(y ~ x, data=fabData) #Fit an estimated regression model to the fabData.
summary(fab.lm) #Summarize your model.
plot(y ~ x, data=fabData) #Plot the data.
abline(fab.lm) #Add the estimated regression line to your plot.
# Now for something you can't do in real life... but since we created the data...
abline(beta0, beta1, lty=2) #Add the true regression line to your plot using a dashed line (lty=2).
legend("topleft", legend=c("True Line", "Estimated Line"), lty=c(2,1), bty="n") #Add a legend to your plot specifying which line is which.
## Simulating Data from a Regression Model
## This R-chunk is meant to be played in your R Console.
## It allows you to explore how the various elements
## of the regression model combine together to "create"
## data and then use the data to "re-create" the line.
set.seed(101) #Allows us to always get the same "random" sample
#Change to a new number to get a new sample
n <- 30 #set the sample size
X_i <- runif(n, 15, 45) #Gives n random values from a uniform distribution between 15 to 45.
beta0 <- 3 #Our choice for the y-intercept.
beta1 <- 1.8 #Our choice for the slope.
sigma <- 2.5 #Our choice for the std. deviation of the error terms. can change error for bigger gap
epsilon_i <- rnorm(n, 0, sigma) #Gives n random values from a normal distribution with mean = 0, st. dev. = sigma.
Y_i <- beta0 + beta1*X_i + epsilon_i #Create Y using the normal error regression model
fabData <- data.frame(y=Y_i, x=X_i) #Store the data as data
View(fabData)
#In the real world, we begin with data (like fabData) and try to recover the model that (we assume) was used to created it.
fab.lm <- lm(y ~ x, data=fabData) #Fit an estimated regression model to the fabData.
summary(fab.lm) #Summarize your model.
plot(y ~ x, data=fabData) #Plot the data.
abline(fab.lm) #Add the estimated regression line to your plot.
# Now for something you can't do in real life... but since we created the data...
abline(beta0, beta1, lty=2) #Add the true regression line to your plot using a dashed line (lty=2).
legend("topleft", legend=c("True Line", "Estimated Line"), lty=c(2,1), bty="n") #Add a legend to your plot specifying which line is which.
## Simulating Data from a Regression Model
## This R-chunk is meant to be played in your R Console.
## It allows you to explore how the various elements
## of the regression model combine together to "create"
## data and then use the data to "re-create" the line.
set.seed(101) #Allows us to always get the same "random" sample
#Change to a new number to get a new sample
n <- 200 #set the sample size
X_i <- runif(n, 15, 45) #Gives n random values from a uniform distribution between 15 to 45.
beta0 <- 3 #Our choice for the y-intercept.
beta1 <- 1.8 #Our choice for the slope.
sigma <- 2.5 #Our choice for the std. deviation of the error terms. can change error for bigger gap
epsilon_i <- rnorm(n, 0, sigma) #Gives n random values from a normal distribution with mean = 0, st. dev. = sigma.
Y_i <- beta0 + beta1*X_i + epsilon_i #Create Y using the normal error regression model
fabData <- data.frame(y=Y_i, x=X_i) #Store the data as data
View(fabData)
#In the real world, we begin with data (like fabData) and try to recover the model that (we assume) was used to created it.
fab.lm <- lm(y ~ x, data=fabData) #Fit an estimated regression model to the fabData.
summary(fab.lm) #Summarize your model.
plot(y ~ x, data=fabData) #Plot the data.
abline(fab.lm) #Add the estimated regression line to your plot.
# Now for something you can't do in real life... but since we created the data...
abline(beta0, beta1, lty=2) #Add the true regression line to your plot using a dashed line (lty=2).
legend("topleft", legend=c("True Line", "Estimated Line"), lty=c(2,1), bty="n") #Add a legend to your plot specifying which line is which.
## Simulating Data from a Regression Model
## This R-chunk is meant to be played in your R Console.
## It allows you to explore how the various elements
## of the regression model combine together to "create"
## data and then use the data to "re-create" the line.
set.seed(101) #Allows us to always get the same "random" sample
#Change to a new number to get a new sample
n <- 30 #set the sample size
X_i <- runif(n, 15, 45) #Gives n random values from a uniform distribution between 15 to 45.
beta0 <- 10 #Our choice for the y-intercept.
beta1 <- 1.8 #Our choice for the slope.
sigma <- 2.5 #Our choice for the std. deviation of the error terms. can change error for bigger gap
epsilon_i <- rnorm(n, 0, sigma) #Gives n random values from a normal distribution with mean = 0, st. dev. = sigma.
Y_i <- beta0 + beta1*X_i + epsilon_i #Create Y using the normal error regression model
fabData <- data.frame(y=Y_i, x=X_i) #Store the data as data
View(fabData)
#In the real world, we begin with data (like fabData) and try to recover the model that (we assume) was used to created it.
fab.lm <- lm(y ~ x, data=fabData) #Fit an estimated regression model to the fabData.
summary(fab.lm) #Summarize your model.
plot(y ~ x, data=fabData) #Plot the data.
abline(fab.lm) #Add the estimated regression line to your plot.
# Now for something you can't do in real life... but since we created the data...
abline(beta0, beta1, lty=2) #Add the true regression line to your plot using a dashed line (lty=2).
legend("topleft", legend=c("True Line", "Estimated Line"), lty=c(2,1), bty="n") #Add a legend to your plot specifying which line is which.
## Simulating Data from a Regression Model
## This R-chunk is meant to be played in your R Console.
## It allows you to explore how the various elements
## of the regression model combine together to "create"
## data and then use the data to "re-create" the line.
set.seed(101) #Allows us to always get the same "random" sample
#Change to a new number to get a new sample
n <- 30 #set the sample size
X_i <- runif(n, 15, 45) #Gives n random values from a uniform distribution between 15 to 45.
beta0 <- 100 #Our choice for the y-intercept.
beta1 <- 1.8 #Our choice for the slope.
sigma <- 2.5 #Our choice for the std. deviation of the error terms. can change error for bigger gap
epsilon_i <- rnorm(n, 0, sigma) #Gives n random values from a normal distribution with mean = 0, st. dev. = sigma.
Y_i <- beta0 + beta1*X_i + epsilon_i #Create Y using the normal error regression model
fabData <- data.frame(y=Y_i, x=X_i) #Store the data as data
View(fabData)
#In the real world, we begin with data (like fabData) and try to recover the model that (we assume) was used to created it.
fab.lm <- lm(y ~ x, data=fabData) #Fit an estimated regression model to the fabData.
summary(fab.lm) #Summarize your model.
plot(y ~ x, data=fabData) #Plot the data.
abline(fab.lm) #Add the estimated regression line to your plot.
# Now for something you can't do in real life... but since we created the data...
abline(beta0, beta1, lty=2) #Add the true regression line to your plot using a dashed line (lty=2).
legend("topleft", legend=c("True Line", "Estimated Line"), lty=c(2,1), bty="n") #Add a legend to your plot specifying which line is which.
## Simulating Data from a Regression Model
## This R-chunk is meant to be played in your R Console.
## It allows you to explore how the various elements
## of the regression model combine together to "create"
## data and then use the data to "re-create" the line.
set.seed(101) #Allows us to always get the same "random" sample
#Change to a new number to get a new sample
n <- 30 #set the sample size
X_i <- runif(n, 15, 45) #Gives n random values from a uniform distribution between 15 to 45.
beta0 <- 3 #Our choice for the y-intercept.
beta1 <- 1.8 #Our choice for the slope.
sigma <- 2.5 #Our choice for the std. deviation of the error terms. can change error for bigger gap
epsilon_i <- rnorm(n, 0, sigma) #Gives n random values from a normal distribution with mean = 0, st. dev. = sigma.
Y_i <- beta0 + beta1*X_i + epsilon_i #Create Y using the normal error regression model
fabData <- data.frame(y=Y_i, x=X_i) #Store the data as data
View(fabData)
#In the real world, we begin with data (like fabData) and try to recover the model that (we assume) was used to created it.
fab.lm <- lm(y ~ x, data=fabData) #Fit an estimated regression model to the fabData.
summary(fab.lm) #Summarize your model.
plot(y ~ x, data=fabData) #Plot the data.
abline(fab.lm) #Add the estimated regression line to your plot.
# Now for something you can't do in real life... but since we created the data...
abline(beta0, beta1, lty=2) #Add the true regression line to your plot using a dashed line (lty=2).
legend("topleft", legend=c("True Line", "Estimated Line"), lty=c(2,1), bty="n") #Add a legend to your plot specifying which line is which.
## Simulating Data from a Regression Model
## This R-chunk is meant to be played in your R Console.
## It allows you to explore how the various elements
## of the regression model combine together to "create"
## data and then use the data to "re-create" the line.
set.seed(101) #Allows us to always get the same "random" sample
#Change to a new number to get a new sample
n <- 30 #set the sample size
X_i <- runif(n, 15, 45) #Gives n random values from a uniform distribution between 15 to 45.
beta0 <- 3 #Our choice for the y-intercept.
beta1 <- 100 #Our choice for the slope.
sigma <- 2.5 #Our choice for the std. deviation of the error terms. can change error for bigger gap
epsilon_i <- rnorm(n, 0, sigma) #Gives n random values from a normal distribution with mean = 0, st. dev. = sigma.
Y_i <- beta0 + beta1*X_i + epsilon_i #Create Y using the normal error regression model
fabData <- data.frame(y=Y_i, x=X_i) #Store the data as data
View(fabData)
#In the real world, we begin with data (like fabData) and try to recover the model that (we assume) was used to created it.
fab.lm <- lm(y ~ x, data=fabData) #Fit an estimated regression model to the fabData.
summary(fab.lm) #Summarize your model.
plot(y ~ x, data=fabData) #Plot the data.
abline(fab.lm) #Add the estimated regression line to your plot.
# Now for something you can't do in real life... but since we created the data...
abline(beta0, beta1, lty=2) #Add the true regression line to your plot using a dashed line (lty=2).
legend("topleft", legend=c("True Line", "Estimated Line"), lty=c(2,1), bty="n") #Add a legend to your plot specifying which line is which.
## Simulating Data from a Regression Model
## This R-chunk is meant to be played in your R Console.
## It allows you to explore how the various elements
## of the regression model combine together to "create"
## data and then use the data to "re-create" the line.
set.seed(101) #Allows us to always get the same "random" sample
#Change to a new number to get a new sample
n <- 30 #set the sample size
X_i <- runif(n, 15, 45) #Gives n random values from a uniform distribution between 15 to 45.
beta0 <- 3 #Our choice for the y-intercept.
beta1 <- 1.8 #Our choice for the slope.
sigma <- 200 #Our choice for the std. deviation of the error terms. can change error for bigger gap
epsilon_i <- rnorm(n, 0, sigma) #Gives n random values from a normal distribution with mean = 0, st. dev. = sigma.
Y_i <- beta0 + beta1*X_i + epsilon_i #Create Y using the normal error regression model
fabData <- data.frame(y=Y_i, x=X_i) #Store the data as data
View(fabData)
#In the real world, we begin with data (like fabData) and try to recover the model that (we assume) was used to created it.
fab.lm <- lm(y ~ x, data=fabData) #Fit an estimated regression model to the fabData.
summary(fab.lm) #Summarize your model.
plot(y ~ x, data=fabData) #Plot the data.
abline(fab.lm) #Add the estimated regression line to your plot.
# Now for something you can't do in real life... but since we created the data...
abline(beta0, beta1, lty=2) #Add the true regression line to your plot using a dashed line (lty=2).
legend("topleft", legend=c("True Line", "Estimated Line"), lty=c(2,1), bty="n") #Add a legend to your plot specifying which line is which.
## Simulating Data from a Regression Model
## This R-chunk is meant to be played in your R Console.
## It allows you to explore how the various elements
## of the regression model combine together to "create"
## data and then use the data to "re-create" the line.
set.seed(101) #Allows us to always get the same "random" sample
#Change to a new number to get a new sample
n <- 30 #set the sample size
X_i <- runif(n, 15, 45) #Gives n random values from a uniform distribution between 15 to 45.
beta0 <- 3 #Our choice for the y-intercept.
beta1 <- 1.8 #Our choice for the slope.
sigma <- 2.5 #Our choice for the std. deviation of the error terms. can change error for bigger gap
epsilon_i <- rnorm(n, 0, sigma) #Gives n random values from a normal distribution with mean = 0, st. dev. = sigma.
Y_i <- beta0 + beta1*X_i + epsilon_i #Create Y using the normal error regression model
fabData <- data.frame(y=Y_i, x=X_i) #Store the data as data
View(fabData)
#In the real world, we begin with data (like fabData) and try to recover the model that (we assume) was used to created it.
fab.lm <- lm(y ~ x, data=fabData) #Fit an estimated regression model to the fabData.
summary(fab.lm) #Summarize your model.
plot(y ~ x, data=fabData) #Plot the data.
abline(fab.lm) #Add the estimated regression line to your plot.
# Now for something you can't do in real life... but since we created the data...
abline(beta0, beta1, lty=2) #Add the true regression line to your plot using a dashed line (lty=2).
legend("topleft", legend=c("True Line", "Estimated Line"), lty=c(2,1), bty="n") #Add a legend to your plot specifying which line is which.
